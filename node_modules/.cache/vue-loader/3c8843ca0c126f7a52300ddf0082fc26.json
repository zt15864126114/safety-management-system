{"remainingRequest":"D:\\safety-management-system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\safety-management-system\\src\\views\\Inspection.vue?vue&type=style&index=0&id=3b20652e&scoped=true&lang=css","dependencies":[{"path":"D:\\safety-management-system\\src\\views\\Inspection.vue","mtime":1735553878375},{"path":"D:\\safety-management-system\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\safety-management-system\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\safety-management-system\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\safety-management-system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\safety-management-system\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouaW5zcGVjdGlvbi10YXNrIHsNCiAgcGFkZGluZzogMjBweDsNCn0NCg0KLmNhcmQtaGVhZGVyIHsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOw0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KfQ0KDQouaGVhZGVyLWxlZnQgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KfQ0KDQoudGl0bGUgew0KICBmb250LXNpemU6IDE2cHg7DQogIGZvbnQtd2VpZ2h0OiBib2xkOw0KICBtYXJnaW4tcmlnaHQ6IDIwcHg7DQp9DQoNCi5xdWljay1hY3Rpb25zIHsNCiAgbWFyZ2luLWxlZnQ6IDIwcHg7DQp9DQoNCi5zZWFyY2gtZm9ybSB7DQogIG1hcmdpbjogMTVweCAwOw0KICBwYWRkaW5nOiAxNXB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmN2ZhOw0KICBib3JkZXItcmFkaXVzOiA0cHg7DQp9DQoNCi5iYXRjaC1hY3Rpb25zIHsNCiAgbWFyZ2luOiAxMHB4IDA7DQogIHBhZGRpbmc6IDEwcHg7DQogIGJhY2tncm91bmQtY29sb3I6ICNmZmYzZTY7DQogIGJvcmRlci1yYWRpdXM6IDRweDsNCn0NCg0KLnBhZ2luYXRpb24tY29udGFpbmVyIHsNCiAgbWFyZ2luLXRvcDogMjBweDsNCiAgdGV4dC1hbGlnbjogcmlnaHQ7DQp9DQoNCi50YXNrLWZvcm0gew0KICBtYXgtaGVpZ2h0OiA1MDBweDsNCiAgb3ZlcmZsb3cteTogYXV0bzsNCn0NCg0KLml0ZW1zLXNlY3Rpb24sDQoubG9nLXNlY3Rpb24gew0KICBtYXJnaW4tdG9wOiAyMHB4Ow0KICBwYWRkaW5nLXRvcDogMjBweDsNCiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNFQkVFRjU7DQp9DQoNCi5lbC10cmFuc2ZlciB7DQogIG1hcmdpbjogMTVweCAwOw0KfQ0KDQoubGluZSB7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCg=="},{"version":3,"sources":["Inspection.vue"],"names":[],"mappings":";AAg6BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"Inspection.vue","sourceRoot":"src/views","sourcesContent":["<!-- 任务配置对话框 -->\r\n<el-dialog\r\n    :title=\"dialogTitle\"\r\n    :visible.sync=\"taskDialogVisible\"\r\n    width=\"60%\"\r\n    :before-close=\"handleDialogClose\">\r\n<el-form\r\n    :model=\"taskForm\"\r\n    :rules=\"rules\"\r\n    ref=\"taskForm\"\r\n    label-width=\"100px\"\r\n    class=\"task-form\">\r\n  <el-form-item label=\"任务名称\" prop=\"name\">\r\n    <el-input v-model=\"taskForm.name\"></el-input>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"任务类型\" prop=\"type\">\r\n    <el-select v-model=\"taskForm.type\" placeholder=\"请选择任务类型\">\r\n      <el-option label=\"日常巡检\" value=\"daily\"></el-option>\r\n      <el-option label=\"专项巡检\" value=\"special\"></el-option>\r\n      <el-option label=\"临时巡检\" value=\"temporary\"></el-option>\r\n    </el-select>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"巡检区域\" prop=\"areas\">\r\n    <el-cascader\r\n        v-model=\"taskForm.areas\"\r\n        :options=\"areaOptions\"\r\n        :props=\"{ multiple: true }\"\r\n        collapse-tags\r\n        placeholder=\"请选择巡检区域\">\r\n    </el-cascader>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"巡检项目\" prop=\"items\">\r\n    <el-transfer\r\n        v-model=\"taskForm.items\"\r\n        :data=\"inspectionItems\"\r\n        :titles=\"['可选项目', '已选项目']\"\r\n        :button-texts=\"['移除', '添加']\"\r\n        filterable>\r\n    </el-transfer>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"执行人\" prop=\"executor\">\r\n    <el-select\r\n        v-model=\"taskForm.executor\"\r\n        filterable\r\n        remote\r\n        reserve-keyword\r\n        placeholder=\"请输入姓名搜索\"\r\n        :remote-method=\"remoteSearchUsers\"\r\n        :loading=\"userLoading\">\r\n      <el-option\r\n          v-for=\"user in userOptions\"\r\n          :key=\"user.id\"\r\n          :label=\"user.name\"\r\n          :value=\"user.id\">\r\n        <span>{{ user.name }}</span>\r\n        <span class=\"user-info\">({{ user.department }})</span>\r\n      </el-option>\r\n    </el-select>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"计划时间\" prop=\"timeRange\" required>\r\n    <el-col :span=\"11\">\r\n      <el-form-item prop=\"planStartTime\">\r\n        <el-date-picker\r\n            v-model=\"taskForm.planStartTime\"\r\n            type=\"datetime\"\r\n            placeholder=\"开始时间\"\r\n            style=\"width: 100%;\">\r\n        </el-date-picker>\r\n      </el-form-item>\r\n    </el-col>\r\n    <el-col class=\"line\" :span=\"2\">-</el-col>\r\n    <el-col :span=\"11\">\r\n      <el-form-item prop=\"planEndTime\">\r\n        <el-date-picker\r\n            v-model=\"taskForm.planEndTime\"\r\n            type=\"datetime\"\r\n            placeholder=\"结束时间\"\r\n            style=\"width: 100%;\">\r\n        </el-date-picker>\r\n      </el-form-item>\r\n    </el-col>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"重复设置\" v-if=\"taskForm.type === 'daily'\">\r\n    <el-checkbox-group v-model=\"taskForm.repeatDays\">\r\n      <el-checkbox label=\"1\">周一</el-checkbox>\r\n      <el-checkbox label=\"2\">周二</el-checkbox>\r\n      <el-checkbox label=\"3\">周三</el-checkbox>\r\n      <el-checkbox label=\"4\">周四</el-checkbox>\r\n      <el-checkbox label=\"5\">周五</el-checkbox>\r\n      <el-checkbox label=\"6\">周六</el-checkbox>\r\n      <el-checkbox label=\"0\">周日</el-checkbox>\r\n    </el-checkbox-group>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"提醒设置\" prop=\"reminder\">\r\n    <el-select v-model=\"taskForm.reminder\">\r\n      <el-option label=\"不提醒\" value=\"none\"></el-option>\r\n      <el-option label=\"开始时\" value=\"start\"></el-option>\r\n      <el-option label=\"提前15分钟\" value=\"15min\"></el-option>\r\n      <el-option label=\"提前30分钟\" value=\"30min\"></el-option>\r\n      <el-option label=\"提前1小时\" value=\"1hour\"></el-option>\r\n    </el-select>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"备注\" prop=\"description\">\r\n    <el-input\r\n        type=\"textarea\"\r\n        v-model=\"taskForm.description\"\r\n        :rows=\"3\">\r\n    </el-input>\r\n  </el-form-item>\r\n</el-form>\r\n<div slot=\"footer\">\r\n  <el-button @click=\"handleDialogClose\">取消</el-button>\r\n  <el-button type=\"primary\" @click=\"saveTask\">保存</el-button>\r\n</div>\r\n</el-dialog>\r\n\r\n<!-- 任务详情对话框 -->\r\n<el-dialog\r\n    title=\"任务详情\"\r\n    :visible.sync=\"detailDialogVisible\"\r\n    width=\"50%\">\r\n<el-descriptions :column=\"2\" border>\r\n  <el-descriptions-item label=\"任务名称\">{{ currentTask.name }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"任务类型\">\r\n    {{ getTaskTypeName(currentTask.type) }}\r\n  </el-descriptions-item>\r\n  <el-descriptions-item label=\"执行人\">{{ currentTask.executor }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"执行状态\">\r\n    <el-tag :type=\"getStatusType(currentTask.status)\">\r\n      {{ getStatusName(currentTask.status) }}\r\n    </el-tag>\r\n  </el-descriptions-item>\r\n  <el-descriptions-item label=\"计划开始时间\">{{ currentTask.planStartTime }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"计划结束时间\">{{ currentTask.planEndTime }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"实际开始时间\">{{ currentTask.actualStartTime || '-' }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"实际结束时间\">{{ currentTask.actualEndTime || '-' }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"进度\">\r\n    <el-progress\r\n        :percentage=\"currentTask.progress\"\r\n        :status=\"getProgressStatus(currentTask)\">\r\n    </el-progress>\r\n  </el-descriptions-item>\r\n  <el-descriptions-item label=\"创建时间\">{{ currentTask.createTime }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"备注\" :span=\"2\">\r\n    {{ currentTask.description }}\r\n  </el-descriptions-item>\r\n</el-descriptions>\r\n\r\n<!-- 巡检项目列表 -->\r\n<div class=\"items-section\">\r\n  <h4>巡检项目</h4>\r\n  <el-table :data=\"currentTask.items\" border size=\"small\">\r\n    <el-table-column prop=\"name\" label=\"项目名称\"></el-table-column>\r\n    <el-table-column prop=\"standard\" label=\"检查标准\"></el-table-column>\r\n    <el-table-column prop=\"result\" label=\"检查结果\">\r\n      <template slot-scope=\"scope\">\r\n        <el-tag :type=\"scope.row.result === 'normal' ? 'success' : 'danger'\">\r\n          {{ scope.row.result === 'normal' ? '正常' : '异常' }}\r\n        </el-tag>\r\n      </template>\r\n    </el-table-column>\r\n    <el-table-column prop=\"checkTime\" label=\"检查时间\"></el-table-column>\r\n    <el-table-column prop=\"remarks\" label=\"备注\"></el-table-column>\r\n  </el-table>\r\n</div>\r\n\r\n<!-- 任务日志 -->\r\n<div class=\"log-section\">\r\n  <h4>执行日志</h4>\r\n  <el-timeline>\r\n    <el-timeline-item\r\n        v-for=\"(log, index) in taskLogs\"\r\n        :key=\"index\"\r\n        :type=\"log.type\"\r\n        :timestamp=\"log.time\">\r\n      {{ log.content }}\r\n    </el-timeline-item>\r\n  </el-timeline>\r\n</div>\r\n</el-dialog>\r\n<!-- 任务配置对话框 -->\r\n<el-dialog\r\n    :title=\"dialogTitle\"\r\n    :visible.sync=\"taskDialogVisible\"\r\n    width=\"60%\"\r\n    :before-close=\"handleDialogClose\">\r\n<el-form\r\n    :model=\"taskForm\"\r\n    :rules=\"rules\"\r\n    ref=\"taskForm\"\r\n    label-width=\"100px\"\r\n    class=\"task-form\">\r\n  <el-form-item label=\"任务名称\" prop=\"name\">\r\n    <el-input v-model=\"taskForm.name\"></el-input>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"任务类型\" prop=\"type\">\r\n    <el-select v-model=\"taskForm.type\" placeholder=\"请选择任务类型\">\r\n      <el-option label=\"日常巡检\" value=\"daily\"></el-option>\r\n      <el-option label=\"专项巡检\" value=\"special\"></el-option>\r\n      <el-option label=\"临时巡检\" value=\"temporary\"></el-option>\r\n    </el-select>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"巡检区域\" prop=\"areas\">\r\n    <el-cascader\r\n        v-model=\"taskForm.areas\"\r\n        :options=\"areaOptions\"\r\n        :props=\"{ multiple: true }\"\r\n        collapse-tags\r\n        placeholder=\"请选择巡检区域\">\r\n    </el-cascader>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"巡检项目\" prop=\"items\">\r\n    <el-transfer\r\n        v-model=\"taskForm.items\"\r\n        :data=\"inspectionItems\"\r\n        :titles=\"['可选项目', '已选项目']\"\r\n        :button-texts=\"['移除', '添加']\"\r\n        filterable>\r\n    </el-transfer>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"执行人\" prop=\"executor\">\r\n    <el-select\r\n        v-model=\"taskForm.executor\"\r\n        filterable\r\n        remote\r\n        reserve-keyword\r\n        placeholder=\"请输入姓名搜索\"\r\n        :remote-method=\"remoteSearchUsers\"\r\n        :loading=\"userLoading\">\r\n      <el-option\r\n          v-for=\"user in userOptions\"\r\n          :key=\"user.id\"\r\n          :label=\"user.name\"\r\n          :value=\"user.id\">\r\n        <span>{{ user.name }}</span>\r\n        <span class=\"user-info\">({{ user.department }})</span>\r\n      </el-option>\r\n    </el-select>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"计划时间\" prop=\"timeRange\" required>\r\n    <el-col :span=\"11\">\r\n      <el-form-item prop=\"planStartTime\">\r\n        <el-date-picker\r\n            v-model=\"taskForm.planStartTime\"\r\n            type=\"datetime\"\r\n            placeholder=\"开始时间\"\r\n            style=\"width: 100%;\">\r\n        </el-date-picker>\r\n      </el-form-item>\r\n    </el-col>\r\n    <el-col class=\"line\" :span=\"2\">-</el-col>\r\n    <el-col :span=\"11\">\r\n      <el-form-item prop=\"planEndTime\">\r\n        <el-date-picker\r\n            v-model=\"taskForm.planEndTime\"\r\n            type=\"datetime\"\r\n            placeholder=\"结束时间\"\r\n            style=\"width: 100%;\">\r\n        </el-date-picker>\r\n      </el-form-item>\r\n    </el-col>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"重复设置\" v-if=\"taskForm.type === 'daily'\">\r\n    <el-checkbox-group v-model=\"taskForm.repeatDays\">\r\n      <el-checkbox label=\"1\">周一</el-checkbox>\r\n      <el-checkbox label=\"2\">周二</el-checkbox>\r\n      <el-checkbox label=\"3\">周三</el-checkbox>\r\n      <el-checkbox label=\"4\">周四</el-checkbox>\r\n      <el-checkbox label=\"5\">周五</el-checkbox>\r\n      <el-checkbox label=\"6\">周六</el-checkbox>\r\n      <el-checkbox label=\"0\">周日</el-checkbox>\r\n    </el-checkbox-group>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"提醒设置\" prop=\"reminder\">\r\n    <el-select v-model=\"taskForm.reminder\">\r\n      <el-option label=\"不提醒\" value=\"none\"></el-option>\r\n      <el-option label=\"开始时\" value=\"start\"></el-option>\r\n      <el-option label=\"提前15分钟\" value=\"15min\"></el-option>\r\n      <el-option label=\"提前30分钟\" value=\"30min\"></el-option>\r\n      <el-option label=\"提前1小时\" value=\"1hour\"></el-option>\r\n    </el-select>\r\n  </el-form-item>\r\n\r\n  <el-form-item label=\"备注\" prop=\"description\">\r\n    <el-input\r\n        type=\"textarea\"\r\n        v-model=\"taskForm.description\"\r\n        :rows=\"3\">\r\n    </el-input>\r\n  </el-form-item>\r\n</el-form>\r\n<div slot=\"footer\">\r\n  <el-button @click=\"handleDialogClose\">取消</el-button>\r\n  <el-button type=\"primary\" @click=\"saveTask\">保存</el-button>\r\n</div>\r\n</el-dialog>\r\n\r\n<!-- 任务详情对话框 -->\r\n<el-dialog\r\n    title=\"任务详情\"\r\n    :visible.sync=\"detailDialogVisible\"\r\n    width=\"50%\">\r\n<el-descriptions :column=\"2\" border>\r\n  <el-descriptions-item label=\"任务名称\">{{ currentTask.name }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"任务类型\">\r\n    {{ getTaskTypeName(currentTask.type) }}\r\n  </el-descriptions-item>\r\n  <el-descriptions-item label=\"执行人\">{{ currentTask.executor }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"执行状态\">\r\n    <el-tag :type=\"getStatusType(currentTask.status)\">\r\n      {{ getStatusName(currentTask.status) }}\r\n    </el-tag>\r\n  </el-descriptions-item>\r\n  <el-descriptions-item label=\"计划开始时间\">{{ currentTask.planStartTime }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"计划结束时间\">{{ currentTask.planEndTime }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"实际开始时间\">{{ currentTask.actualStartTime || '-' }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"实际结束时间\">{{ currentTask.actualEndTime || '-' }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"进度\">\r\n    <el-progress\r\n        :percentage=\"currentTask.progress\"\r\n        :status=\"getProgressStatus(currentTask)\">\r\n    </el-progress>\r\n  </el-descriptions-item>\r\n  <el-descriptions-item label=\"创建时间\">{{ currentTask.createTime }}</el-descriptions-item>\r\n  <el-descriptions-item label=\"备注\" :span=\"2\">\r\n    {{ currentTask.description }}\r\n  </el-descriptions-item>\r\n</el-descriptions>\r\n\r\n<!-- 巡检项目列表 -->\r\n<div class=\"items-section\">\r\n  <h4>巡检项目</h4>\r\n  <el-table :data=\"currentTask.items\" border size=\"small\">\r\n    <el-table-column prop=\"name\" label=\"项目名称\"></el-table-column>\r\n    <el-table-column prop=\"standard\" label=\"检查标准\"></el-table-column>\r\n    <el-table-column prop=\"result\" label=\"检查结果\">\r\n      <template slot-scope=\"scope\">\r\n        <el-tag :type=\"scope.row.result === 'normal' ? 'success' : 'danger'\">\r\n          {{ scope.row.result === 'normal' ? '正常' : '异常' }}\r\n        </el-tag>\r\n      </template>\r\n    </el-table-column>\r\n    <el-table-column prop=\"checkTime\" label=\"检查时间\"></el-table-column>\r\n    <el-table-column prop=\"remarks\" label=\"备注\"></el-table-column>\r\n  </el-table>\r\n</div>\r\n\r\n<!-- 任务日志 -->\r\n<div class=\"log-section\">\r\n  <h4>执行日志</h4>\r\n  <el-timeline>\r\n    <el-timeline-item\r\n        v-for=\"(log, index) in taskLogs\"\r\n        :key=\"index\"\r\n        :type=\"log.type\"\r\n        :timestamp=\"log.time\">\r\n      {{ log.content }}\r\n    </el-timeline-item>\r\n  </el-timeline>\r\n</div>\r\n</el-dialog>\r\n\r\n<script>\r\nimport * as XLSX from 'xlsx'\r\nimport { saveAs } from 'file-saver'\r\n\r\nexport default {\r\n  name: 'InspectionTask',\r\n  data() {\r\n    return {\r\n      // 模拟数据库\r\n      mockDatabase: [\r\n        {\r\n          id: 1,\r\n          name: '设备日常巡检',\r\n          type: 'daily',\r\n          areas: ['工厂1', '车间A'],\r\n          items: [\r\n            {\r\n              id: 1,\r\n              name: '温度检查',\r\n              standard: '正常范围：20-30℃',\r\n              result: 'normal',\r\n              checkTime: '2024-01-20 10:00:00',\r\n              remarks: '温度正常'\r\n            },\r\n            {\r\n              id: 2,\r\n              name: '压力检查',\r\n              standard: '正常范围：0.5-0.8MPa',\r\n              result: 'normal',\r\n              checkTime: '2024-01-20 10:05:00',\r\n              remarks: '压力正常'\r\n            }\r\n          ],\r\n          executor: {\r\n            id: 1,\r\n            name: '张三',\r\n            department: '运维部'\r\n          },\r\n          status: 'processing',\r\n          progress: 60,\r\n          planStartTime: '2024-01-20 09:00:00',\r\n          planEndTime: '2024-01-20 17:00:00',\r\n          actualStartTime: '2024-01-20 09:05:00',\r\n          actualEndTime: null,\r\n          repeatDays: ['1', '2', '3', '4', '5'],\r\n          reminder: '15min',\r\n          description: '日常设备巡检任务',\r\n          createTime: '2024-01-19 16:00:00'\r\n        }\r\n      ],\r\n      // 搜索表单\r\n      searchForm: {\r\n        name: '',\r\n        type: '',\r\n        status: '',\r\n        dateRange: []\r\n      },\r\n      // 表格加载状态\r\n      tableLoading: false,\r\n      // 任务列表\r\n      tasksList: [],\r\n      // 选中的任务\r\n      selection: [],\r\n      // 分页信息\r\n      pagination: {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        total: 0\r\n      },\r\n      // 对话框显示控制\r\n      taskDialogVisible: false,\r\n      detailDialogVisible: false,\r\n      importDialogVisible: false,\r\n      dialogTitle: '',\r\n      // 当前任务\r\n      currentTask: {},\r\n      // 任务表单\r\n      taskForm: {\r\n        name: '',\r\n        type: '',\r\n        areas: [],\r\n        items: [],\r\n        executor: null,\r\n        planStartTime: '',\r\n        planEndTime: '',\r\n        repeatDays: [],\r\n        reminder: 'none',\r\n        description: ''\r\n      },\r\n      // 表单验证规则\r\n      rules: {\r\n        name: [\r\n          { required: true, message: '请输入任务名称', trigger: 'blur' },\r\n          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }\r\n        ],\r\n        type: [\r\n          { required: true, message: '请选择任务类型', trigger: 'change' }\r\n        ],\r\n        areas: [\r\n          { required: true, message: '请选择巡检区域', trigger: 'change' }\r\n        ],\r\n        items: [\r\n          { required: true, message: '请选择巡检项目', trigger: 'change' }\r\n        ],\r\n        executor: [\r\n          { required: true, message: '请选择执行人', trigger: 'change' }\r\n        ],\r\n        planStartTime: [\r\n          { required: true, message: '请选择计划开始时间', trigger: 'change' }\r\n        ],\r\n        planEndTime: [\r\n          { required: true, message: '请选择计划结束时间', trigger: 'change' }\r\n        ]\r\n      },\r\n      // 区域选项\r\n      areaOptions: [\r\n        {\r\n          value: '工厂1',\r\n          label: '工厂1',\r\n          children: [\r\n            { value: '车间A', label: '车间A' },\r\n            { value: '车间B', label: '车间B' },\r\n            { value: '仓库', label: '仓库' }\r\n          ]\r\n        },\r\n        {\r\n          value: '工厂2',\r\n          label: '工厂2',\r\n          children: [\r\n            { value: '车间C', label: '车间C' },\r\n            { value: '车间D', label: '车间D' }\r\n          ]\r\n        }\r\n      ],\r\n      // 巡检项目列表\r\n      inspectionItems: [\r\n        { key: 1, label: '温度检查' },\r\n        { key: 2, label: '压力检查' },\r\n        { key: 3, label: '噪音检查' },\r\n        { key: 4, label: '振动检查' },\r\n        { key: 5, label: '润滑检查' }\r\n      ],\r\n      // 用户选择相关\r\n      userLoading: false,\r\n      userOptions: [],\r\n      // 任务日志\r\n      taskLogs: [],\r\n      // 操作日志\r\n      operationLogs: []\r\n    }\r\n  },\r\n  methods: {\r\n    // 加载任务列表\r\n    async loadTasks() {\r\n      this.tableLoading = true\r\n      try {\r\n        // 模拟API调用\r\n        await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n        // 过滤任务\r\n        let filteredTasks = [...this.mockDatabase]\r\n\r\n        if (this.searchForm.name) {\r\n          filteredTasks = filteredTasks.filter(task =>\r\n              task.name.toLowerCase().includes(this.searchForm.name.toLowerCase())\r\n          )\r\n        }\r\n\r\n        if (this.searchForm.type) {\r\n          filteredTasks = filteredTasks.filter(task => task.type === this.searchForm.type)\r\n        }\r\n\r\n        if (this.searchForm.status) {\r\n          filteredTasks = filteredTasks.filter(task => task.status === this.searchForm.status)\r\n        }\r\n\r\n        if (this.searchForm.dateRange && this.searchForm.dateRange.length === 2) {\r\n          const startDate = this.searchForm.dateRange[0]\r\n          const endDate = this.searchForm.dateRange[1]\r\n          filteredTasks = filteredTasks.filter(task => {\r\n            const planStartTime = new Date(task.planStartTime)\r\n            return planStartTime >= startDate && planStartTime <= endDate\r\n          })\r\n        }\r\n\r\n        // 计算分页\r\n        const start = (this.pagination.currentPage - 1) * this.pagination.pageSize\r\n        const end = start + this.pagination.pageSize\r\n\r\n        this.pagination.total = filteredTasks.length\r\n        this.tasksList = filteredTasks.slice(start, end)\r\n      } catch (error) {\r\n        this.$message.error('加载任务列表失败')\r\n        console.error(error)\r\n      } finally {\r\n        this.tableLoading = false\r\n      }\r\n    },\r\n\r\n    // 保存任务\r\n    async saveTask() {\r\n      try {\r\n        await this.$refs.taskForm.validate()\r\n\r\n        const formData = { ...this.taskForm }\r\n        const now = new Date().toLocaleString()\r\n\r\n        if (formData.id) {\r\n          // 编辑现有任务\r\n          const index = this.mockDatabase.findIndex(t => t.id === formData.id)\r\n          if (index !== -1) {\r\n            this.mockDatabase[index] = {\r\n              ...this.mockDatabase[index],\r\n              ...formData,\r\n              updateTime: now\r\n            }\r\n            this.addOperationLog('更新', formData.name)\r\n          }\r\n        } else {\r\n          // 新增任务\r\n          const newTask = {\r\n            ...formData,\r\n            id: Date.now(),\r\n            status: 'pending',\r\n            progress: 0,\r\n            createTime: now,\r\n            updateTime: now\r\n          }\r\n          this.mockDatabase.push(newTask)\r\n          this.addOperationLog('新增', formData.name)\r\n        }\r\n\r\n        this.$message.success('任务保存成功')\r\n        this.taskDialogVisible = false\r\n        this.loadTasks()\r\n      } catch (error) {\r\n        this.$message.error('表单验证失败，请检查必填项')\r\n      }\r\n    },\r\n\r\n    // 任务控制（开始/暂停）\r\n    async handleTaskControl(task) {\r\n      const isStart = task.status !== 'processing'\r\n      const actionText = isStart ? '开始' : '暂停'\r\n\r\n      try {\r\n        await this.$confirm(`确认${actionText}该任务?`, '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n\r\n        const targetTask = this.mockDatabase.find(t => t.id === task.id)\r\n        if (targetTask) {\r\n          if (isStart) {\r\n            targetTask.status = 'processing'\r\n            targetTask.actualStartTime = targetTask.actualStartTime || new Date().toLocaleString()\r\n          } else {\r\n            targetTask.status = 'paused'\r\n          }\r\n          this.addTaskLog(task.id, `任务${actionText}`, isStart ? 'success' : 'warning')\r\n          this.$message.success(`任务${actionText}成功`)\r\n          this.loadTasks()\r\n        }\r\n      } catch (error) {\r\n        // 用户取消操作\r\n      }\r\n    },\r\n\r\n    // 批量开始任务\r\n    async batchStart() {\r\n      try {\r\n        await this.$confirm(\r\n            `确认开始选中的 ${this.selection.length} 个任务?`,\r\n            '提示',\r\n            {\r\n              confirmButtonText: '确定',\r\n              cancelButtonText: '取消',\r\n              type: 'warning'\r\n            }\r\n        )\r\n\r\n        this.selection.forEach(task => {\r\n          const target = this.mockDatabase.find(t => t.id === task.id)\r\n          if (target && target.status !== 'processing') {\r\n            target.status = 'processing'\r\n            target.actualStartTime = target.actualStartTime || new Date().toLocaleString()\r\n            this.addTaskLog(task.id, '任务开始', 'success')\r\n          }\r\n        })\r\n\r\n        this.$message.success('批量开始成功')\r\n        this.loadTasks()\r\n      } catch (error) {\r\n        // 用户取消操作\r\n      }\r\n    },\r\n\r\n    // 批量暂停任务\r\n    async batchPause() {\r\n      try {\r\n        await this.$confirm(\r\n            `确认暂停选中的 ${this.selection.length} 个任务?`,\r\n            '提示',\r\n            {\r\n              confirmButtonText: '确定',\r\n              cancelButtonText: '取消',\r\n              type: 'warning'\r\n            }\r\n        )\r\n\r\n        this.selection.forEach(task => {\r\n          const target = this.mockDatabase.find(t => t.id === task.id)\r\n          if (target && target.status === 'processing') {\r\n            target.status = 'paused'\r\n            this.addTaskLog(task.id, '任务暂停', 'warning')\r\n          }\r\n        })\r\n\r\n        this.$message.success('批量暂停成功')\r\n        this.loadTasks()\r\n      } catch (error) {\r\n        // 用户取消操作\r\n      }\r\n    },\r\n\r\n    // 删除任务\r\n    async handleDelete(task) {\r\n      try {\r\n        await this.$confirm('确认删除该任务?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n\r\n        const index = this.mockDatabase.findIndex(t => t.id === task.id)\r\n        if (index !== -1) {\r\n          this.mockDatabase.splice(index, 1)\r\n          this.$message.success('任务删除成功')\r\n          this.addOperationLog('删除', task.name)\r\n          this.loadTasks()\r\n        }\r\n      } catch (error) {\r\n        // 用户取消操作\r\n      }\r\n    },\r\n\r\n    // 批量删除任务\r\n    async batchDelete() {\r\n      try {\r\n        await this.$confirm(\r\n            `确认删除选中的 ${this.selection.length} 个任务?`,\r\n            '提示',\r\n            {\r\n              confirmButtonText: '确定',\r\n              cancelButtonText: '取消',\r\n              type: 'danger'\r\n            }\r\n        )\r\n\r\n        const ids = this.selection.map(task => task.id)\r\n        this.mockDatabase = this.mockDatabase.filter(task => !ids.includes(task.id))\r\n\r\n        this.$message.success('批量删除成功')\r\n        this.addOperationLog('批量删除', `${this.selection.length}个任务`)\r\n        this.loadTasks()\r\n      } catch (error) {\r\n        // 用户取消操作\r\n      }\r\n    },\r\n\r\n    // 显示任务详情\r\n    async showTaskDetail(task) {\r\n      this.currentTask = { ...task }\r\n      await this.loadTaskLogs(task.id)\r\n      this.detailDialogVisible = true\r\n    },\r\n\r\n    // 显示新增任务对话框\r\n    showAddTask() {\r\n      this.dialogTitle = '新增巡检任务'\r\n      this.taskForm = {\r\n        name: '',\r\n        type: '',\r\n        areas: [],\r\n        items: [],\r\n        executor: null,\r\n        planStartTime: '',\r\n        planEndTime: '',\r\n        repeatDays: [],\r\n        reminder: 'none',\r\n        description: ''\r\n      }\r\n      this.taskDialogVisible = true\r\n    },\r\n\r\n    // 编辑任务\r\n    handleEdit(task) {\r\n      this.dialogTitle = '编辑巡检任务'\r\n      this.taskForm = { ...task }\r\n      this.taskDialogVisible = true\r\n    },\r\n\r\n    // 加载任务日志\r\n    async loadTaskLogs(taskId) {\r\n      // 模拟加载任务日志\r\n      this.taskLogs = [\r\n        {\r\n          time: '2024-01-20 09:05:00',\r\n          type: 'success',\r\n          content: '任务开始执行'\r\n        },\r\n        {\r\n          time: '2024-01-20 10:00:00',\r\n          type: 'success',\r\n          content: '完成温度检查：正常'\r\n        },\r\n        {\r\n          time: '2024-01-20 10:05:00',\r\n          type: 'success',\r\n          content: '完成压力检查：正常'\r\n        }\r\n      ]\r\n    },\r\n\r\n    // 添加任务日志\r\n    addTaskLog(taskId, content, type = 'info') {\r\n      const log = {\r\n        time: new Date().toLocaleString(),\r\n        type,\r\n        content\r\n      }\r\n      this.taskLogs.unshift(log)\r\n    },\r\n\r\n    // 导出任务\r\n    exportTasks() {\r\n      const exportData = this.mockDatabase.map(task => ({\r\n        '任务名称': task.name,\r\n        '任务类型': this.getTaskTypeName(task.type),\r\n        '执行人': task.executor.name,\r\n        '执行状态': this.getStatusName(task.status),\r\n        '计划开始时间': task.planStartTime,\r\n        '计划结束时间': task.planEndTime,\r\n        '进度': `${task.progress}%`,\r\n        '创建时间': task.createTime\r\n      }))\r\n\r\n      const ws = XLSX.utils.json_to_sheet(exportData)\r\n      const wb = XLSX.utils.book_new()\r\n      XLSX.utils.book_append_sheet(wb, ws, '巡检任务')\r\n\r\n      const wbout = XLSX.write(wb, {\r\n        bookType: 'xlsx',\r\n        type: 'array'\r\n      })\r\n\r\n      saveAs(\r\n          new Blob([wbout], { type: 'application/octet-stream' }),\r\n          `巡检任务_${new Date().toLocaleDateString()}.xlsx`\r\n      )\r\n    },\r\n\r\n    // 辅助方法\r\n    getTaskTypeName(type) {\r\n      const types = {\r\n        daily: '日常巡检',\r\n        special: '专项巡检',\r\n        temporary: '临时巡检'\r\n      }\r\n      return types[type] || type\r\n    },\r\n\r\n    getTaskTypeTag(type) {\r\n      const types = {\r\n        daily: '',\r\n        special: 'success',\r\n        temporary: 'warning'\r\n      }\r\n      return types[type] || ''\r\n    },\r\n\r\n    getStatusName(status) {\r\n      const statuses = {\r\n        pending: '未开始',\r\n        processing: '进行中',\r\n        paused: '已暂停',\r\n        completed: '已完成',\r\n        timeout: '已超时'\r\n      }\r\n      return statuses[status] || status\r\n    },\r\n\r\n    getStatusType(status) {\r\n      const types = {\r\n        pending: 'info',\r\n        processing: 'primary',\r\n        paused: 'warning',\r\n        completed: 'success',\r\n        timeout: 'danger'\r\n      }\r\n      return types[status] || 'info'\r\n    },\r\n\r\n    getProgressStatus(task) {\r\n      if (task.status === 'completed') return 'success'\r\n      if (task.status === 'timeout') return 'exception'\r\n      return ''\r\n    },\r\n\r\n    handleSelectionChange(val) {\r\n      this.selection = val\r\n    },\r\n\r\n    handleSizeChange(val) {\r\n      this.pagination.pageSize = val\r\n      this.loadTasks()\r\n    },\r\n\r\n    handleCurrentChange(val) {\r\n      this.pagination.currentPage = val\r\n      this.loadTasks()\r\n    },\r\n\r\n    handleDialogClose() {\r\n      this.$refs.taskForm.resetFields()\r\n      this.taskDialogVisible = false\r\n    },\r\n\r\n    searchTasks() {\r\n      this.pagination.currentPage = 1\r\n      this.loadTasks()\r\n    },\r\n\r\n    resetSearch() {\r\n      this.searchForm = {\r\n        name: '',\r\n        type: '',\r\n        status: '',\r\n        dateRange: []\r\n      }\r\n      this.searchTasks()\r\n    }\r\n  },\r\n  created() {\r\n    this.loadTasks()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.inspection-task {\r\n  padding: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.header-left {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.title {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  margin-right: 20px;\r\n}\r\n\r\n.quick-actions {\r\n  margin-left: 20px;\r\n}\r\n\r\n.search-form {\r\n  margin: 15px 0;\r\n  padding: 15px;\r\n  background-color: #f5f7fa;\r\n  border-radius: 4px;\r\n}\r\n\r\n.batch-actions {\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  background-color: #fff3e6;\r\n  border-radius: 4px;\r\n}\r\n\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  text-align: right;\r\n}\r\n\r\n.task-form {\r\n  max-height: 500px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.items-section,\r\n.log-section {\r\n  margin-top: 20px;\r\n  padding-top: 20px;\r\n  border-top: 1px solid #EBEEF5;\r\n}\r\n\r\n.el-transfer {\r\n  margin: 15px 0;\r\n}\r\n\r\n.line {\r\n  text-align: center;\r\n}\r\n</style>"]}]}